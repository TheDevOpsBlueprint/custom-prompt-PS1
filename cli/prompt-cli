#!/usr/bin/env bash
# Custom Prompt CLI Tool

VERSION="1.0.0"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROMPT_DIR="${HOME}/.custom-prompt"
COMMANDS_DIR="${SCRIPT_DIR}/commands"

# Load the prompt system to ensure functions are available
if [[ -f "$PROMPT_DIR/loader.sh" ]]; then
    # Source all components to ensure functions work
    source "$PROMPT_DIR/colors.sh"
    source "$PROMPT_DIR/os_detect.sh"
    source "$PROMPT_DIR/git_info.sh"
    source "$PROMPT_DIR/git_status.sh"
    source "$PROMPT_DIR/virtualenv.sh"
    source "$PROMPT_DIR/config.sh"
    source "$PROMPT_DIR/color_config.sh"
    source "$PROMPT_DIR/prompt_builder.sh"
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Print functions
print_info() {
    echo -e "${GREEN}✓${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

# Show help
function show_help() {
    cat << EOF
Custom Prompt CLI v${VERSION}

Usage: prompt-cli [command] [options]

Commands:
  install           Install the custom prompt
  uninstall         Remove the custom prompt
  enable            Enable the custom prompt
  disable           Disable the custom prompt
  reload            Reload prompt configuration
  status            Show current prompt status
  config            Manage configuration
  theme             Manage themes
  version           Show version
  help              Show this help message

Examples:
  prompt-cli install
  prompt-cli theme list
  prompt-cli theme set ocean
  prompt-cli config set SHOW_TIME true
  prompt-cli config list
  prompt-cli status

For more help on a command: prompt-cli [command] help
EOF
}

# Install command
function cmd_install() {
    if [[ -f "${SCRIPT_DIR}/../install.sh" ]]; then
        bash "${SCRIPT_DIR}/../install.sh"
    else
        print_error "Install script not found"
        exit 1
    fi
}

# Uninstall command
function cmd_uninstall() {
    print_warning "This will remove Custom Prompt PS1"
    read -p "Are you sure? (y/n): " -n 1 -r
    echo

    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -rf "$PROMPT_DIR"

        for rc_file in ~/.bashrc ~/.bash_profile ~/.zshrc; do
            if [[ -f "$rc_file" ]]; then
                sed -i.bak '/# Custom Prompt PS1/,/^fi$/d' "$rc_file" 2>/dev/null || \
                sed -i '' '/# Custom Prompt PS1/,/^fi$/d' "$rc_file" 2>/dev/null
            fi
        done

        print_info "Custom Prompt uninstalled"
    else
        print_info "Uninstall cancelled"
    fi
}

# Enable command
function cmd_enable() {
    if type enable_custom_prompt &>/dev/null; then
        enable_custom_prompt
    else
        print_error "Custom prompt not installed. Run: prompt-cli install"
        exit 1
    fi
}

# Disable command
function cmd_disable() {
    if type disable_custom_prompt &>/dev/null; then
        disable_custom_prompt
    else
        print_error "Custom prompt not installed"
        exit 1
    fi
}

# Reload command
function cmd_reload() {
    if type reload_prompt &>/dev/null; then
        reload_prompt
    else
        print_error "Custom prompt not installed"
        exit 1
    fi
}

# Status command
function cmd_status() {
    if type prompt_info &>/dev/null; then
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        prompt_info
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    else
        print_error "Custom prompt not installed"
        echo "Run: prompt-cli install"
        exit 1
    fi
}

# Version command
function cmd_version() {
    cat << EOF
Custom Prompt CLI v${VERSION}

Installation Path: ${PROMPT_DIR}
Config Path: ${HOME}/.config/custom-prompt/config
CLI Path: ${SCRIPT_DIR}

EOF
}

# Main command handler
case "$1" in
    install)
        cmd_install
        ;;
    uninstall)
        cmd_uninstall
        ;;
    enable)
        cmd_enable
        ;;
    disable)
        cmd_disable
        ;;
    reload)
        cmd_reload
        ;;
    status)
        cmd_status
        ;;
    config)
        shift
        subcommand=$1
        shift
        case "$subcommand" in
            list)
                echo "Current Configuration:"
                echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                for key in SHOW_GIT SHOW_USER SHOW_HOST SHOW_PATH SHOW_TIME SHOW_EXIT_CODE SHOW_VIRTUALENV PATH_STYLE THEME GIT_SHOW_STATUS; do
                    value=$(get_config $key)
                    printf "  %-20s : %s\n" "$key" "$value"
                done
                echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                ;;
            get)
                if [[ -n "$1" ]]; then
                    value=$(get_config "$1")
                    echo "$1 = $value"
                else
                    print_error "Usage: prompt-cli config get <key>"
                fi
                ;;
            set)
                if [[ -n "$1" ]] && [[ -n "$2" ]]; then
                    set_config "$1" "$2"
                    print_info "Set $1 = $2"
                    echo "Run 'reload_prompt' to apply changes"
                else
                    print_error "Usage: prompt-cli config set <key> <value>"
                fi
                ;;
            *)
                echo "Usage: prompt-cli config [list|get|set]"
                ;;
        esac
        ;;
    theme)
        shift
        subcommand=$1
        shift
        case "$subcommand" in
            list)
                echo "Available themes:"
                echo "  • default  - Classic colors"
                echo "  • ocean    - Blue/cyan theme"
                echo "  • forest   - Green theme"
                echo "  • minimal  - Monochrome"
                echo "  • dracula  - Purple/dark theme"
                echo ""
                echo "Current theme: $(get_config THEME)"
                ;;
            set)
                if [[ -n "$1" ]]; then
                    case "$1" in
                        default|ocean|forest|minimal|dracula)
                            set_config THEME "$1"
                            load_theme_colors "$1"
                            print_info "Theme set to: $1"
                            echo "Theme applied!"

                            # CRITICAL: Force prompt redraw by writing theme info to parent shell
                            # This creates a file that the parent shell can read
                            echo "$1" > /tmp/prompt-theme-change-$$

                            # Tell user to press Enter to see changes
                            echo ""
                            echo "Open new terminal to see the new theme..."
                            ;;
                        *)
                            print_error "Unknown theme: $1"
                            echo "Available themes: default, ocean, forest, minimal, dracula"
                            ;;
                    esac
                else
                    print_error "Usage: prompt-cli theme set <theme>"
                fi
                ;;
            preview)
                theme="${1:-default}"
                case "$theme" in
                    default|ocean|forest|minimal|dracula)
                        echo "Preview of '$theme' theme:"
                        preview_theme "$theme"
                        ;;
                    *)
                        print_error "Unknown theme: $theme"
                        ;;
                esac
                ;;
            *)
                echo "Usage: prompt-cli theme [list|set|preview]"
                ;;
        esac
        ;;
    version|--version|-v)
        cmd_version
        ;;
    help|--help|-h|"")
        show_help
        ;;
    *)
        print_error "Unknown command: $1"
        echo "Run: prompt-cli help"
        exit 1
        ;;
esac